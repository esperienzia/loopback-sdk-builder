/* tslint:disable */
/**
* @module LoopBackConfig
* @description
*
* The LoopBackConfig module help developers to externally 
* configure the base url and api version for loopback.io
*
* Example
*
* import { LoopBackConfig } from './sdk';
* 
* @Component() // No metadata needed for this module
*
* export class MyApp {
*   constructor() {
*     LoopBackConfig.setBaseURL('http://localhost:3000');
*     LoopBackConfig.setApiVersion('api');
*   }
* }
**/
export class LoopBackConfig {
  private static path: string = '//<%- app.get('host') %>:<%- app.get('port') %>';
  private static version: string |Â number = '<%- app.get('restApiRoot').replace(/^\//, '') %>';
  private static authPrefix: string = '';
  private static debug: boolean = true;
  private static filterOn: string = 'headers';
  private static whereOn: string = 'headers';
  private static secure: boolean = false;
  private static withCredentials: boolean = false;

  // NSI
  private static storageKeyPrefix: string = '$LoopBackSDK$';
  private static tokenIdStorageKey: string = 'id';
  private static userStorageKey: string = 'user';
  private static userIdStorageKey: string = 'userId';
  private static createdStorageKey: string = 'created';
  private static ttlStorageKey: string = 'ttl';
  private static rememberMeStorageKey: string = 'rememberMe';
  // Fine NSI


  public static setApiVersion(version: string = 'api'): void {
    LoopBackConfig.version = version;
  }
  
  public static getApiVersion(): string | number {
    return LoopBackConfig.version;
  }

  public static setBaseURL(url: string = '/'): void {
    LoopBackConfig.path = url;
  }
  
  public static getPath(): string {
    return LoopBackConfig.path;
  }

  public static setAuthPrefix(authPrefix: string = ''): void {
    LoopBackConfig.authPrefix = authPrefix;
  }

  public static getAuthPrefix(): string {
    return LoopBackConfig.authPrefix;
  }

  public static setDebugMode(isEnabled: boolean): void {
    LoopBackConfig.debug = isEnabled;
  }

  public static debuggable(): boolean {
    return LoopBackConfig.debug;
  }

  public static filterOnUrl(): void {
    LoopBackConfig.filterOn = 'url';
  }

  public static filterOnHeaders(): void {
    LoopBackConfig.filterOn = 'headers';
  }

  public static whereOnUrl(): void {
    LoopBackConfig.whereOn = 'url';
  }

  public static whereOnHeaders(): void {
    LoopBackConfig.whereOn = 'headers';
  }

  public static isHeadersFilteringSet(): boolean {
    return (LoopBackConfig.filterOn === 'headers');
  }

  public static isHeadersWhereSet(): boolean {
    return (LoopBackConfig.whereOn === 'headers');
  }

  public static setSecureWebSockets(): void {
    LoopBackConfig.secure = true;
  }

  public static unsetSecureWebSockets(): void {
    LoopBackConfig.secure = false;
  }

  public static isSecureWebSocketsSet(): boolean {
    return LoopBackConfig.secure;
  }

  public static setRequestOptionsCredentials(withCredentials: boolean = false): void {
    LoopBackConfig.withCredentials = withCredentials;
  }

  public static getRequestOptionsCredentials(): boolean {
    return LoopBackConfig.withCredentials;
  }

  // NSI
  public static setStorageKeyPrefix(value: string): void {
    LoopBackConfig.storageKeyPrefix = value;
  }

  public static getStorageKeyPrefix(): string {
    return LoopBackConfig.storageKeyPrefix;
  }

  public static setTokenIdStorageKey(value: string): void {
    LoopBackConfig.tokenIdStorageKey = value;
  }

  public static getTokenIdStorageKey(): string {
    return LoopBackConfig.tokenIdStorageKey;
  }

  public static setUserStorageKey(value: string): void {
    LoopBackConfig.userStorageKey = value;
  }

  public static getUserStorageKey(): string {
    return LoopBackConfig.userStorageKey;
  }

  public static setUserIdStorageKey(value: string): void {
    LoopBackConfig.userIdStorageKey = value;
  }

  public static getUserIdStorageKey(): string {
    return LoopBackConfig.userIdStorageKey;
  }

  public static setCreatedStorageKey(value: string): void {
    LoopBackConfig.createdStorageKey = value;
  }

  public static getCreatedStorageKey(): string {
    return LoopBackConfig.createdStorageKey;
  }

  public static setTtlStorageKey(value: string): void {
    LoopBackConfig.ttlStorageKey = value;
  }

  public static getTtlStorageKey(): string {
    return LoopBackConfig.ttlStorageKey;
  }

  public static setRememberMeStorageKey(value: string): void {
    LoopBackConfig.rememberMeStorageKey = value;
  }

  public static getRememberMeStorageKey(): string {
    return LoopBackConfig.rememberMeStorageKey;
  }
  // Fine NSI
}
